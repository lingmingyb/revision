Awk Notes
=========

<Unix范例精解>

第六章 Awk实用程序

Awk是一种用于处理数据和生成报告的UNIX编程语言。

Awk已逐行方式扫描文件(或输入), 从第一行到最后一行，以查找匹配某个特定模式
的文本行，并对这些文本行执行(括在花括号)中的特定动作。

如果只给出模式而未给出动作，则打印所有匹配行;
如果只给出动作而未指定模式，会对所有输入行执行指定动作。

**模式**

如果某个表达式中没有出现`if`，但实际却暗含`if`这个意思，那么，这个表达式
就是“模式”。

模式不能被包括在`{ }`中，模式有包括在两个`/`中的正则表达式、判别条件真伪的
表达式或者二者的组合构成。

**操作**

操作由扩在`{ }`内的一条或多条语句组成，同一行内的多条语句之间用分号`;`隔开，
独占一行的语句则以换行符分隔。


**格式**

	$ awk 'pattern' file
	$ awk '{action}' file
	$ awk 'pattern {action}' file

	$ command | awk 'pattern {action}'

	$ awk 'pattern { action1; action2; action3}'

	$ awk 'pattern{
			action1
			action2
			action3
		   }'

**工作原理**
	
	$ awk '{print $1, $3}' file

1. awk将一行文本当作一个“记录”，将此记录赋给一个内部变量`$0`;

2. 一个记录被内部变量`FS`分解成字段，每一个字段储存在已编号的变量中，从$1开始，
最多可达100个字段;`FS`可以被指定，初始为空格——包括制表符和空格符。

3. 使用`print`函数打印字段。`$1`和`$3`间的逗号映射另一个内部变量`OFS`，其默认
为空格。

4. awk处理完一行之后，从文件获取下一行，将其储存到`$0`, 覆盖原来的内容，将记录
分隔成字段进行处理。这个过程将持续到整个文件的所有行都被处理完毕。

**print和printf函数**

`print`函数会在打印完后自动换行，`printf`则不会。

**使用多个字段分隔符**

如果有多个字符被用于字段分隔符`FS`，则`FS`对应是一个正则表达式，并且被包含在
括号里：
	
	$ awk -F '[ :\t]' '{print $1, $1}' file

**OFS**

	$ awk '{print $1, $3}' file

输出时`$1`和`$3`间的逗号被`OFS`替换，`OFS`默认为一个空格。

	$ awk '{print $0}' file

记录按照输入文件的格式输出。

**匹配操作符**

匹配操作符(`~`)用于对记录或字段进行匹配。

	$ awk '$1 ~ /pattern/' filename
	$ awk '$1 ~! /pattern/' filename

###变量###


